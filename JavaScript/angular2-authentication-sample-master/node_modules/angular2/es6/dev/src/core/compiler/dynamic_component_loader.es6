import {assert} from "rtts_assert/rtts_assert";
import {Key,
  Injector,
  Injectable,
  ResolvedBinding,
  Binding,
  bind} from 'angular2/di';
import {Compiler} from './compiler';
import {Type,
  BaseException,
  stringify,
  isPresent} from 'angular2/src/facade/lang';
import {Promise} from 'angular2/src/facade/async';
import {AppViewManager} from 'angular2/src/core/compiler/view_manager';
import {ElementRef} from './element_injector';
import {AppView} from './view';
export class ComponentRef {
  constructor(location, instance, componentView, dispose) {
    assert.argumentTypes(location, ElementRef, instance, assert.type.any, componentView, AppView, dispose, Function);
    this.location = location;
    this.instance = instance;
    this.componentView = componentView;
    this._dispose = dispose;
  }
  get injector() {
    return this.location.injector;
  }
  get hostView() {
    return this.location.hostView;
  }
  dispose() {
    this._dispose();
  }
}
Object.defineProperty(ComponentRef, "parameters", {get: function() {
    return [[ElementRef], [assert.type.any], [AppView], [Function]];
  }});
export class DynamicComponentLoader {
  constructor(compiler, viewManager) {
    assert.argumentTypes(compiler, Compiler, viewManager, AppViewManager);
    this._compiler = compiler;
    this._viewManager = viewManager;
  }
  loadIntoExistingLocation(typeOrBinding, location, injector = null) {
    assert.argumentTypes(typeOrBinding, assert.type.any, location, ElementRef, injector, Injector);
    var binding = this._getBinding(typeOrBinding);
    return assert.returnType((this._compiler.compile(binding.token).then((componentProtoView) => {
      var componentView = this._viewManager.createDynamicComponentView(location, componentProtoView, binding, injector);
      var dispose = () => {
        throw new BaseException("Not implemented");
      };
      return new ComponentRef(location, location.elementInjector.getDynamicallyLoadedComponent(), componentView, dispose);
    })), assert.genericType(Promise, ComponentRef));
  }
  loadIntoNewLocation(typeOrBinding, parentComponentLocation, elementOrSelector, injector = null) {
    assert.argumentTypes(typeOrBinding, assert.type.any, parentComponentLocation, ElementRef, elementOrSelector, assert.type.any, injector, Injector);
    return assert.returnType((this._compiler.compileInHost(this._getBinding(typeOrBinding)).then((hostProtoView) => {
      var hostView = this._viewManager.createInPlaceHostView(parentComponentLocation, elementOrSelector, hostProtoView, injector);
      var newLocation = hostView.elementInjectors[0].getElementRef();
      var component = hostView.elementInjectors[0].getComponent();
      var dispose = () => {
        this._viewManager.destroyInPlaceHostView(parentComponentLocation, hostView);
      };
      return new ComponentRef(newLocation, component, hostView.componentChildViews[0], dispose);
    })), assert.genericType(Promise, ComponentRef));
  }
  loadNextToExistingLocation(typeOrBinding, location, injector = null) {
    assert.argumentTypes(typeOrBinding, assert.type.any, location, ElementRef, injector, Injector);
    var binding = this._getBinding(typeOrBinding);
    return assert.returnType((this._compiler.compileInHost(binding).then((hostProtoView) => {
      var hostView = location.viewContainer.create(-1, hostProtoView, injector);
      var newLocation = hostView.elementInjectors[0].getElementRef();
      var component = hostView.elementInjectors[0].getComponent();
      var dispose = () => {
        var index = location.viewContainer.indexOf(hostView);
        location.viewContainer.remove(index);
      };
      return new ComponentRef(newLocation, component, hostView.componentChildViews[0], dispose);
    })), assert.genericType(Promise, ComponentRef));
  }
  _getBinding(typeOrBinding) {
    var binding;
    if (typeOrBinding instanceof Binding) {
      binding = typeOrBinding;
    } else {
      binding = bind(typeOrBinding).toClass(typeOrBinding);
    }
    return binding;
  }
}
Object.defineProperty(DynamicComponentLoader, "annotations", {get: function() {
    return [new Injectable()];
  }});
Object.defineProperty(DynamicComponentLoader, "parameters", {get: function() {
    return [[Compiler], [AppViewManager]];
  }});
Object.defineProperty(DynamicComponentLoader.prototype.loadIntoExistingLocation, "parameters", {get: function() {
    return [[], [ElementRef], [Injector]];
  }});
Object.defineProperty(DynamicComponentLoader.prototype.loadIntoNewLocation, "parameters", {get: function() {
    return [[], [ElementRef], [assert.type.any], [Injector]];
  }});
Object.defineProperty(DynamicComponentLoader.prototype.loadNextToExistingLocation, "parameters", {get: function() {
    return [[], [ElementRef], [Injector]];
  }});
//# sourceMappingURL=dynamic_component_loader.js.map

//# sourceMappingURL=./dynamic_component_loader.map