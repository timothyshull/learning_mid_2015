import {assert} from "rtts_assert/rtts_assert";
import {ListWrapper,
  MapWrapper,
  List} from 'angular2/src/facade/collection';
import {Injector} from 'angular2/di';
import * as eiModule from 'angular2/src/core/compiler/element_injector';
import {isPresent,
  isBlank} from 'angular2/src/facade/lang';
import * as viewModule from './view';
import * as avmModule from './view_manager';
export class ViewContainerRef {
  constructor(viewManager, location, defaultProtoView) {
    assert.argumentTypes(viewManager, avmModule.AppViewManager, location, eiModule.ElementRef, defaultProtoView, viewModule.AppProtoView);
    this._viewManager = viewManager;
    this._location = location;
    this._defaultProtoView = defaultProtoView;
  }
  _getViews() {
    var vc = this._location.hostView.viewContainers[this._location.boundElementIndex];
    return isPresent(vc) ? vc.views : [];
  }
  clear() {
    for (var i = this.length - 1; i >= 0; i--) {
      this.remove(i);
    }
  }
  get(index) {
    assert.argumentTypes(index, assert.type.number);
    return assert.returnType((this._getViews()[index]), viewModule.AppView);
  }
  get length() {
    return this._getViews().length;
  }
  create(atIndex = -1, protoView = null, injector = null) {
    assert.argumentTypes(atIndex, assert.type.number, protoView, viewModule.AppProtoView, injector, Injector);
    if (atIndex == -1)
      atIndex = this.length;
    if (isBlank(protoView)) {
      protoView = this._defaultProtoView;
    }
    return assert.returnType((this._viewManager.createViewInContainer(this._location, atIndex, protoView, injector)), viewModule.AppView);
  }
  insert(view, atIndex = -1) {
    assert.argumentTypes(view, viewModule.AppView, atIndex, assert.type.number);
    if (atIndex == -1)
      atIndex = this.length;
    return assert.returnType((this._viewManager.attachViewInContainer(this._location, atIndex, view)), viewModule.AppView);
  }
  indexOf(view) {
    assert.argumentTypes(view, viewModule.AppView);
    return ListWrapper.indexOf(this._getViews(), view);
  }
  remove(atIndex = -1) {
    assert.argumentTypes(atIndex, assert.type.number);
    if (atIndex == -1)
      atIndex = this.length - 1;
    this._viewManager.destroyViewInContainer(this._location, atIndex);
  }
  detach(atIndex = -1) {
    assert.argumentTypes(atIndex, assert.type.number);
    if (atIndex == -1)
      atIndex = this.length - 1;
    return assert.returnType((this._viewManager.detachViewInContainer(this._location, atIndex)), viewModule.AppView);
  }
}
Object.defineProperty(ViewContainerRef, "parameters", {get: function() {
    return [[avmModule.AppViewManager], [eiModule.ElementRef], [viewModule.AppProtoView]];
  }});
Object.defineProperty(ViewContainerRef.prototype.get, "parameters", {get: function() {
    return [[assert.type.number]];
  }});
Object.defineProperty(ViewContainerRef.prototype.create, "parameters", {get: function() {
    return [[assert.type.number], [viewModule.AppProtoView], [Injector]];
  }});
Object.defineProperty(ViewContainerRef.prototype.insert, "parameters", {get: function() {
    return [[viewModule.AppView], [assert.type.number]];
  }});
Object.defineProperty(ViewContainerRef.prototype.indexOf, "parameters", {get: function() {
    return [[viewModule.AppView]];
  }});
Object.defineProperty(ViewContainerRef.prototype.remove, "parameters", {get: function() {
    return [[assert.type.number]];
  }});
Object.defineProperty(ViewContainerRef.prototype.detach, "parameters", {get: function() {
    return [[assert.type.number]];
  }});
//# sourceMappingURL=view_container_ref.js.map

//# sourceMappingURL=./view_container_ref.map