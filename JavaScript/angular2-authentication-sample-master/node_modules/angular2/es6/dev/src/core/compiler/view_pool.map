{"version":3,"sources":["view_pool.js"],"names":[],"mappings":"AAAA;AAAA,KAAO,EAAC,MAAK;AAAG,YAAU,CAAC,KAAO,cAAY,CAAC;AAC/C,KAAO,EAAC,WAAU;AAAG,WAAS;AAAG,IAAE;AAAG,KAAG,CAAC,KAAO,iCAA+B,CAAC;AACjF,KAAO,EAAC,SAAQ;AAAG,QAAM,CAAC,KAAO,2BAAyB,CAAC;AAE3D,UAAY,WAAS,CAAA,IAAO,SAAO,CAAC;AAIpC,KAAO,CAAM,KAAA,CAAA,sBAAqB,EAAI,+BAA6B,CAAC;AAAA,AAEpE,KAAO,MAAM,YAAU;AAIrB,YAAU,CAAE,AAAgC,wBAAuB,CAAG;AACpE,OAAG,0BAA0B,EAAI,yBAAuB,CAAC;AACzD,OAAG,yBAAyB,EAAI,CAAA,UAAS,OAAO,AAAC,EAAC,CAAC;EACrD;AAAA,AAEA,QAAM,CAAE,SAAQ,AAAwB;AAnB1C,SAAK,cAAc,WAmBC,CAAA,UAAS,aAAa,CAnBJ,CAAA;AAoBlC,AAAI,MAAA,CAAA,WAAU,EAAI,CAAA,UAAS,IAAI,AAAC,CAAC,IAAG,yBAAyB,CAAG,UAAQ,CAAC,CAAC;AAC1E,OAAI,SAAQ,AAAC,CAAC,WAAU,CAAC,CAAA,EAAK,CAAA,WAAU,OAAO,EAAI,EAAA,CAAG;AArB1D,WAAO,CAAA,MAAK,WAAW,AAAC,CAAC,CAsBZ,WAAU,WAAW,AAAC,CAAC,WAAU,CAAC,CAtBJ,CAmBE,CAAA,UAAS,QAAQ,CAnBC,CAAA;IAuB3D;AAAA,AAvBJ,SAAO,CAAA,MAAK,WAAW,AAAC,CAAC,CAwBd,IAAG,CAxB6B,CAmBE,CAAA,UAAS,QAAQ,CAnBC,CAAA;EAyB7D;AAEA,WAAS,CAAE,IAAG,AAAmB,CAAG;AA3BtC,SAAK,cAAc,MA2BD,CAAA,UAAS,QAAQ,CA3BG,CAAA;AA4BlC,AAAI,MAAA,CAAA,SAAQ,EAAI,CAAA,IAAG,MAAM,CAAC;AAC1B,AAAI,MAAA,CAAA,WAAU,EAAI,CAAA,UAAS,IAAI,AAAC,CAAC,IAAG,yBAAyB,CAAG,UAAQ,CAAC,CAAC;AAC1E,OAAI,OAAM,AAAC,CAAC,WAAU,CAAC,CAAG;AACxB,gBAAU,EAAI,GAAC,CAAC;AAChB,eAAS,IAAI,AAAC,CAAC,IAAG,yBAAyB,CAAG,UAAQ,CAAG,YAAU,CAAC,CAAC;IACvE;AAAA,AACA,OAAI,WAAU,OAAO,EAAI,CAAA,IAAG,0BAA0B,CAAG;AACvD,gBAAU,KAAK,AAAC,CAAC,WAAU,CAAG,KAAG,CAAC,CAAC;IACrC;AAAA,EACF;AAAA,AAEF;AAAA,AAvCA,KAAK,eAAe,AAAC,2BACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,eAaX,OAAK,AAAC,CAAC,sBAAqB,CAAC,GAbK;EAAC,CAAC,CAAC,CAAC;AADrD,KAAK,eAAe,AAAC,6CACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YAkBN,UAAS,aAAa,GAlBO;EAAC,CAAC,CAAC,CAAC;AADrD,KAAK,eAAe,AAAC,gDACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YA0BR,UAAS,QAAQ,GA1Bc;EAAC,CAAC,CAAC,CAAC;AAsCrD","file":"angular2/src/core/compiler/view_pool.es6","sourcesContent":["import {Inject, OpaqueToken} from 'angular2/di';\nimport {ListWrapper, MapWrapper, Map, List} from 'angular2/src/facade/collection';\nimport {isPresent, isBlank} from 'angular2/src/facade/lang';\n\nimport * as viewModule from './view';\n\n\n// TODO(tbosch): Make this an OpaqueToken as soon as our transpiler supports this!\nexport const APP_VIEW_POOL_CAPACITY = 'AppViewPool.viewPoolCapacity';\n\nexport class AppViewPool {\n  _poolCapacityPerProtoView:number;\n  _pooledViewsPerProtoView:Map<viewModule.AppProtoView, List<viewModule.AppView>>;\n\n  constructor(@Inject(APP_VIEW_POOL_CAPACITY) poolCapacityPerProtoView) {\n    this._poolCapacityPerProtoView = poolCapacityPerProtoView;\n    this._pooledViewsPerProtoView = MapWrapper.create();\n  }\n\n  getView(protoView:viewModule.AppProtoView):viewModule.AppView {\n    var pooledViews = MapWrapper.get(this._pooledViewsPerProtoView, protoView);\n    if (isPresent(pooledViews) && pooledViews.length > 0) {\n      return ListWrapper.removeLast(pooledViews);\n    }\n    return null;\n  }\n\n  returnView(view:viewModule.AppView) {\n    var protoView = view.proto;\n    var pooledViews = MapWrapper.get(this._pooledViewsPerProtoView, protoView);\n    if (isBlank(pooledViews)) {\n      pooledViews = [];\n      MapWrapper.set(this._pooledViewsPerProtoView, protoView, pooledViews);\n    }\n    if (pooledViews.length < this._poolCapacityPerProtoView) {\n      ListWrapper.push(pooledViews, view);\n    }\n  }\n\n}"]}