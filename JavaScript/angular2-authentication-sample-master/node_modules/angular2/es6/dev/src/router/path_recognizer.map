{"version":3,"sources":["path_recognizer.js"],"names":[],"mappings":"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","file":"angular2/src/router/path_recognizer.es6","sourcesContent":["import {RegExp, RegExpWrapper, RegExpMatcherWrapper, StringWrapper, isPresent} from 'angular2/src/facade/lang';\nimport {Map, MapWrapper, StringMap, StringMapWrapper, List, ListWrapper} from 'angular2/src/facade/collection';\n\nimport {escapeRegex} from './url';\n\nclass StaticSegment {\n  string:string;\n  regex:string;\n  name:string;\n  constructor(string:string) {\n    this.string = string;\n    this.name = '';\n    this.regex = escapeRegex(string);\n  }\n\n  generate(params) {\n    return this.string;\n  }\n}\n\nclass DynamicSegment {\n  name:string;\n  regex:string;\n  constructor(name:string) {\n    this.name = name;\n    this.regex = \"([^/]+)\";\n  }\n\n  generate(params:StringMap) {\n    return StringMapWrapper.get(params, this.name);\n  }\n}\n\n\nclass StarSegment {\n  name:string;\n  regex:string;\n  constructor(name:string) {\n    this.name = name;\n    this.regex = \"(.+)\";\n  }\n\n  generate(params:StringMap) {\n    return StringMapWrapper.get(params, this.name);\n  }\n}\n\n\nvar paramMatcher = RegExpWrapper.create(\"^:([^\\/]+)$\");\nvar wildcardMatcher = RegExpWrapper.create(\"^\\\\*([^\\/]+)$\");\n\nfunction parsePathString(route:string):List {\n  // normalize route as not starting with a \"/\". Recognition will\n  // also normalize.\n  if (route[0] === \"/\") {\n    route = StringWrapper.substring(route, 1);\n  }\n\n  var segments = splitBySlash(route);\n  var results = ListWrapper.create();\n\n  for (var i=0; i<segments.length; i++) {\n    var segment = segments[i],\n      match;\n\n    if (isPresent(match = RegExpWrapper.firstMatch(paramMatcher, segment))) {\n      ListWrapper.push(results, new DynamicSegment(match[1]));\n    } else if (isPresent(match = RegExpWrapper.firstMatch(wildcardMatcher, segment))) {\n      ListWrapper.push(results, new StarSegment(match[1]));\n    } else if (segment.length > 0) {\n      ListWrapper.push(results, new StaticSegment(segment));\n    }\n  }\n\n  return results;\n}\n\nvar SLASH_RE = RegExpWrapper.create('/');\nfunction splitBySlash (url:string):List<string> {\n  return StringWrapper.split(url, SLASH_RE);\n}\n\n\n// represents something like '/foo/:bar'\nexport class PathRecognizer {\n  segments:List;\n  regex:RegExp;\n  handler:any;\n\n  constructor(path:string, handler:any) {\n    this.handler = handler;\n    this.segments = ListWrapper.create();\n\n    var segments = parsePathString(path);\n    var regexString = '^';\n\n    ListWrapper.forEach(segments, (segment) => {\n      regexString += '/' + segment.regex;\n    });\n\n    this.regex = RegExpWrapper.create(regexString);\n    this.segments = segments;\n  }\n\n  parseParams(url:string):StringMap {\n    var params = StringMapWrapper.create();\n    var urlPart = url;\n    for(var i=0; i<this.segments.length; i++) {\n      var segment = this.segments[i];\n      var match = RegExpWrapper.firstMatch(RegExpWrapper.create('/' + segment.regex), urlPart);\n      urlPart = StringWrapper.substring(urlPart, match[0].length);\n      if (segment.name.length > 0) {\n        StringMapWrapper.set(params, segment.name, match[1]);\n      }\n    }\n\n    return params;\n  }\n\n  generate(params:StringMap):string {\n    return ListWrapper.join(ListWrapper.map(this.segments, (segment) => '/' + segment.generate(params)), '');\n  }\n}\n"]}