{"version":3,"sources":["view_container_ref.js"],"names":[],"mappings":"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","file":"angular2/src/core/compiler/view_container_ref.js","sourcesContent":["import {ListWrapper, MapWrapper, List} from 'angular2/src/facade/collection';\nimport {Injector} from 'angular2/di';\nimport * as eiModule from 'angular2/src/core/compiler/element_injector';\nimport {isPresent, isBlank} from 'angular2/src/facade/lang';\n\nimport * as viewModule from './view';\nimport * as avmModule from './view_manager';\n\n/**\n * @exportedAs angular2/view\n */\nexport class ViewContainerRef {\n  _viewManager: avmModule.AppViewManager;\n  _location: eiModule.ElementRef;\n  _defaultProtoView: viewModule.AppProtoView;\n\n  constructor(viewManager: avmModule.AppViewManager,\n              location: eiModule.ElementRef,\n              defaultProtoView: viewModule.AppProtoView) {\n    this._viewManager = viewManager;\n    this._location = location;\n    this._defaultProtoView = defaultProtoView;\n  }\n\n  _getViews() {\n    var vc = this._location.hostView.viewContainers[this._location.boundElementIndex];\n    return isPresent(vc) ? vc.views : [];\n  }\n\n  clear():void {\n    for (var i = this.length - 1; i >= 0; i--) {\n      this.remove(i);\n    }\n  }\n\n  get(index: number): viewModule.AppView {\n    return this._getViews()[index];\n  }\n\n  get length() /* :int */ {\n    return this._getViews().length;\n  }\n\n  // TODO(rado): profile and decide whether bounds checks should be added\n  // to the methods below.\n  create(atIndex:number=-1, protoView:viewModule.AppProtoView = null, injector:Injector = null): viewModule.AppView {\n    if (atIndex == -1) atIndex = this.length;\n    if (isBlank(protoView)) {\n      protoView = this._defaultProtoView;\n    }\n    return this._viewManager.createViewInContainer(this._location, atIndex, protoView, injector);\n  }\n\n  insert(view:viewModule.AppView, atIndex:number=-1): viewModule.AppView {\n    if (atIndex == -1) atIndex = this.length;\n    return this._viewManager.attachViewInContainer(this._location, atIndex, view);\n  }\n\n  indexOf(view:viewModule.AppView) {\n    return ListWrapper.indexOf(this._getViews(), view);\n  }\n\n  remove(atIndex:number=-1):void {\n    if (atIndex == -1) atIndex = this.length - 1;\n    this._viewManager.destroyViewInContainer(this._location, atIndex);\n    // view is intentionally not returned to the client.\n  }\n\n  /**\n   * The method can be used together with insert to implement a view move, i.e.\n   * moving the dom nodes while the directives in the view stay intact.\n   */\n  detach(atIndex:number=-1): viewModule.AppView {\n    if (atIndex == -1) atIndex = this.length - 1;\n    return this._viewManager.detachViewInContainer(this._location, atIndex);\n  }\n}\n"]}