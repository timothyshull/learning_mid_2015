"use strict";
Object.defineProperties(module.exports, {
  AppViewManager: {get: function() {
      return AppViewManager;
    }},
  __esModule: {value: true}
});
var $__angular2_47_di__,
    $__angular2_47_src_47_facade_47_collection__,
    $__angular2_47_src_47_facade_47_lang__,
    $__element_95_injector__,
    $__view__,
    $__angular2_47_src_47_render_47_api__,
    $__view_95_manager_95_utils__,
    $__view_95_pool__;
var $__0 = ($__angular2_47_di__ = require("angular2/di"), $__angular2_47_di__ && $__angular2_47_di__.__esModule && $__angular2_47_di__ || {default: $__angular2_47_di__}),
    Injector = $__0.Injector,
    Injectable = $__0.Injectable,
    Binding = $__0.Binding;
var $__1 = ($__angular2_47_src_47_facade_47_collection__ = require("angular2/src/facade/collection"), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || {default: $__angular2_47_src_47_facade_47_collection__}),
    ListWrapper = $__1.ListWrapper,
    MapWrapper = $__1.MapWrapper,
    Map = $__1.Map,
    StringMapWrapper = $__1.StringMapWrapper,
    List = $__1.List;
var $__2 = ($__angular2_47_src_47_facade_47_lang__ = require("angular2/src/facade/lang"), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || {default: $__angular2_47_src_47_facade_47_lang__}),
    isPresent = $__2.isPresent,
    isBlank = $__2.isBlank,
    BaseException = $__2.BaseException;
var eli = ($__element_95_injector__ = require("./element_injector"), $__element_95_injector__ && $__element_95_injector__.__esModule && $__element_95_injector__ || {default: $__element_95_injector__});
var viewModule = ($__view__ = require("./view"), $__view__ && $__view__.__esModule && $__view__ || {default: $__view__});
var $__3 = ($__angular2_47_src_47_render_47_api__ = require("angular2/src/render/api"), $__angular2_47_src_47_render_47_api__ && $__angular2_47_src_47_render_47_api__.__esModule && $__angular2_47_src_47_render_47_api__ || {default: $__angular2_47_src_47_render_47_api__}),
    Renderer = $__3.Renderer,
    ViewRef = $__3.ViewRef,
    RenderViewContainerRef = $__3.RenderViewContainerRef;
var AppViewManagerUtils = ($__view_95_manager_95_utils__ = require("./view_manager_utils"), $__view_95_manager_95_utils__ && $__view_95_manager_95_utils__.__esModule && $__view_95_manager_95_utils__ || {default: $__view_95_manager_95_utils__}).AppViewManagerUtils;
var AppViewPool = ($__view_95_pool__ = require("./view_pool"), $__view_95_pool__ && $__view_95_pool__.__esModule && $__view_95_pool__ || {default: $__view_95_pool__}).AppViewPool;
var AppViewManager = function AppViewManager(viewPool, utils, renderer) {
  this._renderer = renderer;
  this._viewPool = viewPool;
  this._utils = utils;
};
($traceurRuntime.createClass)(AppViewManager, {
  createDynamicComponentView: function(hostLocation, componentProtoView, componentBinding, injector) {
    var hostView = hostLocation.hostView;
    var boundElementIndex = hostLocation.boundElementIndex;
    var binder = hostView.proto.elementBinders[boundElementIndex];
    if (!binder.hasDynamicComponent()) {
      throw new BaseException(("There is no dynamic component directive at element " + boundElementIndex));
    }
    var componentView = this._createViewRecurse(componentProtoView);
    var renderViewRefs = this._renderer.createDynamicComponentView(hostView.render, boundElementIndex, componentProtoView.render);
    componentView.render = renderViewRefs[0];
    this._utils.attachComponentView(hostView, boundElementIndex, componentView);
    this._utils.hydrateDynamicComponentInElementInjector(hostView, boundElementIndex, componentBinding, injector);
    this._utils.hydrateComponentView(hostView, boundElementIndex);
    this._viewHydrateRecurse(componentView, renderViewRefs, 1);
    return componentView;
  },
  createInPlaceHostView: function(parentComponentLocation, hostElementSelector, hostProtoView, injector) {
    var parentComponentHostView = null;
    var parentComponentBoundElementIndex = null;
    var parentRenderViewRef = null;
    if (isPresent(parentComponentLocation)) {
      parentComponentHostView = parentComponentLocation.hostView;
      parentComponentBoundElementIndex = parentComponentLocation.boundElementIndex;
      parentRenderViewRef = parentComponentHostView.componentChildViews[parentComponentBoundElementIndex].render;
    }
    var hostView = this._createViewRecurse(hostProtoView);
    var renderViewRefs = this._renderer.createInPlaceHostView(parentRenderViewRef, hostElementSelector, hostView.proto.render);
    hostView.render = renderViewRefs[0];
    this._utils.attachAndHydrateInPlaceHostView(parentComponentHostView, parentComponentBoundElementIndex, hostView, injector);
    this._viewHydrateRecurse(hostView, renderViewRefs, 1);
    return hostView;
  },
  destroyInPlaceHostView: function(parentComponentLocation, hostView) {
    var parentView = null;
    var parentRenderViewRef = null;
    if (isPresent(parentComponentLocation)) {
      parentView = parentComponentLocation.hostView.componentChildViews[parentComponentLocation.boundElementIndex];
      parentRenderViewRef = parentView.render;
    }
    var hostViewRenderRef = hostView.render;
    this._viewDehydrateRecurse(hostView);
    this._utils.detachInPlaceHostView(parentView, hostView);
    this._renderer.destroyInPlaceHostView(parentRenderViewRef, hostViewRenderRef);
    this._destroyView(hostView);
  },
  createViewInContainer: function(viewContainerLocation, atIndex, protoView) {
    var injector = arguments[3] !== (void 0) ? arguments[3] : null;
    var parentView = viewContainerLocation.hostView;
    var boundElementIndex = viewContainerLocation.boundElementIndex;
    var view = this._createViewRecurse(protoView);
    var renderViewRefs = this._renderer.createViewInContainer(this._getRenderViewContainerRef(parentView, boundElementIndex), atIndex, view.proto.render);
    view.render = renderViewRefs[0];
    this._utils.attachViewInContainer(parentView, boundElementIndex, atIndex, view);
    this._utils.hydrateViewInContainer(parentView, boundElementIndex, atIndex, injector);
    this._viewHydrateRecurse(view, renderViewRefs, 1);
    return view;
  },
  destroyViewInContainer: function(viewContainerLocation, atIndex) {
    var parentView = viewContainerLocation.hostView;
    var boundElementIndex = viewContainerLocation.boundElementIndex;
    var viewContainer = parentView.viewContainers[boundElementIndex];
    var view = viewContainer.views[atIndex];
    this._viewDehydrateRecurse(view);
    this._utils.detachViewInContainer(parentView, boundElementIndex, atIndex);
    this._renderer.destroyViewInContainer(this._getRenderViewContainerRef(parentView, boundElementIndex), atIndex);
    this._destroyView(view);
  },
  attachViewInContainer: function(viewContainerLocation, atIndex, view) {
    var parentView = viewContainerLocation.hostView;
    var boundElementIndex = viewContainerLocation.boundElementIndex;
    this._utils.attachViewInContainer(parentView, boundElementIndex, atIndex, view);
    this._renderer.insertViewIntoContainer(this._getRenderViewContainerRef(parentView, boundElementIndex), atIndex, view.render);
    return view;
  },
  detachViewInContainer: function(viewContainerLocation, atIndex) {
    var parentView = viewContainerLocation.hostView;
    var boundElementIndex = viewContainerLocation.boundElementIndex;
    var viewContainer = parentView.viewContainers[boundElementIndex];
    var view = viewContainer.views[atIndex];
    this._utils.detachViewInContainer(parentView, boundElementIndex, atIndex);
    this._renderer.detachViewFromContainer(this._getRenderViewContainerRef(parentView, boundElementIndex), atIndex);
    return view;
  },
  _getRenderViewContainerRef: function(parentView, boundElementIndex) {
    return new RenderViewContainerRef(parentView.render, boundElementIndex);
  },
  _createViewRecurse: function(protoView) {
    var view = this._viewPool.getView(protoView);
    if (isBlank(view)) {
      view = this._utils.createView(protoView, this, this._renderer);
      var binders = protoView.elementBinders;
      for (var binderIdx = 0; binderIdx < binders.length; binderIdx++) {
        var binder = binders[binderIdx];
        if (binder.hasStaticComponent()) {
          var childView = this._createViewRecurse(binder.nestedProtoView);
          this._utils.attachComponentView(view, binderIdx, childView);
        }
      }
    }
    return view;
  },
  _destroyView: function(view) {
    this._viewPool.returnView(view);
  },
  _viewHydrateRecurse: function(view, renderComponentViewRefs, renderComponentIndex) {
    this._renderer.setEventDispatcher(view.render, view);
    var binders = view.proto.elementBinders;
    for (var i = 0; i < binders.length; ++i) {
      if (binders[i].hasStaticComponent()) {
        var childView = view.componentChildViews[i];
        childView.render = renderComponentViewRefs[renderComponentIndex++];
        this._utils.hydrateComponentView(view, i);
        renderComponentIndex = this._viewHydrateRecurse(view.componentChildViews[i], renderComponentViewRefs, renderComponentIndex);
      }
    }
    return renderComponentIndex;
  },
  _viewDehydrateRecurse: function(view) {
    this._utils.dehydrateView(view);
    var binders = view.proto.elementBinders;
    for (var i = 0; i < binders.length; i++) {
      var componentView = view.componentChildViews[i];
      if (isPresent(componentView)) {
        this._viewDehydrateRecurse(componentView);
        if (binders[i].hasDynamicComponent()) {
          this._utils.detachComponentView(view, i);
          this._destroyView(componentView);
        }
      }
      var vc = view.viewContainers[i];
      if (isPresent(vc)) {
        for (var j = vc.views.length - 1; j >= 0; j--) {
          var childView = vc.views[j];
          this._viewDehydrateRecurse(childView);
          this._utils.detachViewInContainer(view, i, j);
          this._destroyView(childView);
        }
      }
    }
    for (var i = 0; i < view.imperativeHostViews.length; i++) {
      var hostView = view.imperativeHostViews[i];
      this._viewDehydrateRecurse(hostView);
      this._utils.detachInPlaceHostView(view, hostView);
      this._destroyView(hostView);
    }
    view.render = null;
  }
}, {});
Object.defineProperty(AppViewManager, "annotations", {get: function() {
    return [new Injectable()];
  }});
Object.defineProperty(AppViewManager, "parameters", {get: function() {
    return [[AppViewPool], [AppViewManagerUtils], [Renderer]];
  }});
Object.defineProperty(AppViewManager.prototype.createDynamicComponentView, "parameters", {get: function() {
    return [[eli.ElementRef], [viewModule.AppProtoView], [Binding], [Injector]];
  }});
Object.defineProperty(AppViewManager.prototype.createInPlaceHostView, "parameters", {get: function() {
    return [[eli.ElementRef], [], [viewModule.AppProtoView], [Injector]];
  }});
Object.defineProperty(AppViewManager.prototype.destroyInPlaceHostView, "parameters", {get: function() {
    return [[eli.ElementRef], [viewModule.AppView]];
  }});
Object.defineProperty(AppViewManager.prototype.createViewInContainer, "parameters", {get: function() {
    return [[eli.ElementRef], [$traceurRuntime.type.number], [viewModule.AppProtoView], [Injector]];
  }});
Object.defineProperty(AppViewManager.prototype.destroyViewInContainer, "parameters", {get: function() {
    return [[eli.ElementRef], [$traceurRuntime.type.number]];
  }});
Object.defineProperty(AppViewManager.prototype.attachViewInContainer, "parameters", {get: function() {
    return [[eli.ElementRef], [$traceurRuntime.type.number], [viewModule.AppView]];
  }});
Object.defineProperty(AppViewManager.prototype.detachViewInContainer, "parameters", {get: function() {
    return [[eli.ElementRef], [$traceurRuntime.type.number]];
  }});
Object.defineProperty(AppViewManager.prototype._getRenderViewContainerRef, "parameters", {get: function() {
    return [[viewModule.AppView], [$traceurRuntime.type.number]];
  }});
Object.defineProperty(AppViewManager.prototype._createViewRecurse, "parameters", {get: function() {
    return [[viewModule.AppProtoView]];
  }});
Object.defineProperty(AppViewManager.prototype._destroyView, "parameters", {get: function() {
    return [[viewModule.AppView]];
  }});
Object.defineProperty(AppViewManager.prototype._viewHydrateRecurse, "parameters", {get: function() {
    return [[viewModule.AppView], [$traceurRuntime.genericType(List, ViewRef)], [$traceurRuntime.type.number]];
  }});
Object.defineProperty(AppViewManager.prototype._viewDehydrateRecurse, "parameters", {get: function() {
    return [[viewModule.AppView]];
  }});
//# sourceMappingURL=view_manager.js.map

//# sourceMappingURL=./view_manager.map