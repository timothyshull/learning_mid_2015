{"version":3,"sources":["api.js"],"names":[],"mappings":"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","file":"angular2/src/render/api.js","sourcesContent":["import {isPresent} from 'angular2/src/facade/lang';\nimport {Promise} from 'angular2/src/facade/async';\nimport {List, Map} from 'angular2/src/facade/collection';\nimport {ASTWithSource} from 'angular2/change_detection';\n\n/**\n * General notes:\n *\n * The methods for creating / destroying views in this API are used in the AppViewHydrator\n * and RenderViewHydrator as well.\n *\n * We are already parsing expressions on the render side:\n * - this makes the ElementBinders more compact\n *   (e.g. no need to distinguish interpolations from regular expressions from literals)\n * - allows to retrieve which properties should be accessed from the event\n *   by looking at the expression\n * - we need the parse at least for the `template` attribute to match\n *   directives in it\n * - render compiler is not on the critical path as\n *   its output will be stored in precompiled templates.\n */\nexport class EventBinding {\n  fullName: string; // name/target:name, e.g \"click\", \"window:resize\"\n  source: ASTWithSource;\n\n  constructor(fullName :string, source: ASTWithSource) {\n    this.fullName = fullName;\n    this.source = source;\n  }\n}\n\nexport class ElementBinder {\n  index:number;\n  parentIndex:number;\n  distanceToParent:number;\n  directives:List<DirectiveBinder>;\n  nestedProtoView:ProtoViewDto;\n  propertyBindings: Map<string, ASTWithSource>;\n  variableBindings: Map<string, ASTWithSource>;\n  // Note: this contains a preprocessed AST\n  // that replaced the values that should be extracted from the element\n  // with a local name\n  eventBindings: List<EventBinding>;\n  textBindings: List<ASTWithSource>;\n  readAttributes: Map<string, string>;\n\n  constructor({\n    index, parentIndex, distanceToParent,\n    directives, nestedProtoView,\n    propertyBindings, variableBindings,\n    eventBindings, textBindings,\n    readAttributes\n  }) {\n    this.index = index;\n    this.parentIndex = parentIndex;\n    this.distanceToParent = distanceToParent;\n    this.directives = directives;\n    this.nestedProtoView = nestedProtoView;\n    this.propertyBindings = propertyBindings;\n    this.variableBindings = variableBindings;\n    this.eventBindings = eventBindings;\n    this.textBindings = textBindings;\n    this.readAttributes = readAttributes;\n  }\n}\n\nexport class DirectiveBinder {\n  // Index into the array of directives in the View instance\n  directiveIndex:any;\n  propertyBindings: Map<string, ASTWithSource>;\n  // Note: this contains a preprocessed AST\n  // that replaced the values that should be extracted from the element\n  // with a local name\n  eventBindings: List<EventBinding>;\n  hostPropertyBindings: Map<string, ASTWithSource>;\n  constructor({\n    directiveIndex, propertyBindings, eventBindings, hostPropertyBindings\n  }) {\n    this.directiveIndex = directiveIndex;\n    this.propertyBindings = propertyBindings;\n    this.eventBindings = eventBindings;\n    this.hostPropertyBindings = hostPropertyBindings;\n  }\n}\n\nexport class ProtoViewDto {\n  // A view that contains the host element with bound\n  // component directive.\n  // Contains a view of type #COMPONENT_VIEW_TYPE.\n  static get HOST_VIEW_TYPE() { return 0; }\n  // The view of the component\n  // Can contain 0 to n views of type #EMBEDDED_VIEW_TYPE\n  static get COMPONENT_VIEW_TYPE() { return 1; }\n  // A view that is included via a Viewport directive\n  // inside of a component view\n  static get EMBEDDED_VIEW_TYPE() { return 1; }\n\n  render: ProtoViewRef;\n  elementBinders:List<ElementBinder>;\n  variableBindings: Map<string, string>;\n  type: number;\n\n  constructor({render, elementBinders, variableBindings, type}={}) {\n    this.render = render;\n    this.elementBinders = elementBinders;\n    this.variableBindings = variableBindings;\n    this.type = type;\n  }\n}\n\nexport class DirectiveMetadata {\n  static get DECORATOR_TYPE() { return 0; }\n  static get COMPONENT_TYPE() { return 1; }\n  static get VIEWPORT_TYPE() { return 2; }\n  id:any;\n  selector:string;\n  compileChildren:boolean;\n  hostListeners:Map<string, string>;\n  hostProperties:Map<string, string>;\n  properties:Map<string, string>;\n  readAttributes:List<string>;\n  type:number;\n  constructor({id, selector, compileChildren, hostListeners, hostProperties, properties, readAttributes, type}) {\n    this.id = id;\n    this.selector = selector;\n    this.compileChildren = isPresent(compileChildren) ? compileChildren : true;\n    this.hostListeners = hostListeners;\n    this.hostProperties = hostProperties;\n    this.properties = properties;\n    this.readAttributes = readAttributes;\n    this.type = type;\n  }\n}\n\n// An opaque reference to a RenderProtoView\nexport class ProtoViewRef {}\n\n// An opaque reference to a RenderView\nexport class ViewRef {}\n\nexport class RenderViewContainerRef {\n  view:ViewRef;\n  elementIndex:number;\n  constructor(view:ViewRef, elementIndex: number) {\n    this.view = view;\n    this.elementIndex = elementIndex;\n  }\n}\n\nexport class ViewDefinition {\n  componentId: string;\n  absUrl: string;\n  template: string;\n  directives: List<DirectiveMetadata>;\n\n  constructor({componentId, absUrl, template, directives}) {\n    this.componentId = componentId;\n    this.absUrl = absUrl;\n    this.template = template;\n    this.directives = directives;\n  }\n}\n\nexport class Renderer {\n  /**\n   * Creats a ProtoViewDto that contains a single nested component with the given componentId.\n   */\n  createHostProtoView(componentId):Promise<ProtoViewDto> { return null; }\n\n  /**\n   * Creats a ProtoViewDto for a component that will use an imperative View using the given\n   * renderer.\n   * Note: Rigth now, the renderer argument is ignored, but will be used in the future to define\n   * a custom handler.\n   */\n  createImperativeComponentProtoView(rendererId):Promise<ProtoViewDto> { return null; }\n\n  /**\n   * Compiles a single RenderProtoView. Non recursive so that\n   * we don't need to serialize all possible components over the wire,\n   * but only the needed ones based on previous calls.\n   */\n  compile(template:ViewDefinition):Promise<ProtoViewDto> { return null; }\n\n  /**\n   * Sets the preset nested components,\n   * which will be instantiated when this protoView is instantiated.\n   * Note: We can't create new ProtoViewRefs here as we need to support cycles / recursive components.\n   * @param {List<ProtoViewRef>} protoViewRefs\n   *    RenderProtoView for every element with a component in this protoView or in a view container's protoView\n   */\n  mergeChildComponentProtoViews(protoViewRef:ProtoViewRef, componentProtoViewRefs:List<ProtoViewRef>) { return null; }\n\n  /**\n   * Creates a view and inserts it into a ViewContainer.\n   * @param {RenderViewContainerRef} viewContainerRef\n   * @param {ProtoViewRef} protoViewRef A ProtoViewRef of type ProtoViewDto.HOST_VIEW_TYPE or ProtoViewDto.EMBEDDED_VIEW_TYPE\n   * @param {number} atIndex\n   * @return {List<ViewRef>} the view and all of its nested child component views\n   */\n  createViewInContainer(vcRef:RenderViewContainerRef, atIndex:number, protoViewRef:ProtoViewRef):List<ViewRef> { return null; }\n\n  /**\n   * Destroys the view in the given ViewContainer\n   */\n  destroyViewInContainer(vcRef:RenderViewContainerRef, atIndex:number):void {}\n\n  /**\n   * Inserts a detached view into a viewContainer.\n   */\n  insertViewIntoContainer(vcRef:RenderViewContainerRef, atIndex:number, view:ViewRef):void {}\n\n  /**\n   * Detaches a view from a container so that it can be inserted later on\n   */\n  detachViewFromContainer(vcRef:RenderViewContainerRef, atIndex:number):void {}\n\n  /**\n   * Creates a view and\n   * installs it as a shadow view for an element.\n   *\n   * Note: only allowed if there is a dynamic component directive at this place.\n   * @param {ViewRef} hostView\n   * @param {number} elementIndex\n   * @param {ProtoViewRef} componentProtoViewRef A ProtoViewRef of type ProtoViewDto.COMPONENT_VIEW_TYPE\n   * @return {List<ViewRef>} the view and all of its nested child component views\n   */\n  createDynamicComponentView(hostViewRef:ViewRef, elementIndex:number, componentProtoViewRef:ProtoViewRef):List<ViewRef> { return null; }\n\n  /**\n   * Destroys the component view at the given index\n   *\n   * Note: only allowed if there is a dynamic component directive at this place.\n   */\n  destroyDynamicComponentView(hostViewRef:ViewRef, elementIndex:number):void {}\n\n  /**\n   * Creates a host view that includes the given element.\n   * @param {ViewRef} parentViewRef (might be null)\n   * @param {any} hostElementSelector element or css selector for the host element\n   * @param {ProtoViewRef} hostProtoView a ProtoViewRef of type ProtoViewDto.HOST_VIEW_TYPE\n   * @return {List<ViewRef>} the view and all of its nested child component views\n   */\n  createInPlaceHostView(parentViewRef:ViewRef, hostElementSelector, hostProtoViewRef:ProtoViewRef):List<ViewRef> { return null; }\n\n  /**\n   * Destroys the given host view in the given parent view.\n   */\n  destroyInPlaceHostView(parentViewRef:ViewRef, hostViewRef:ViewRef):void {}\n\n  /**\n   * Sets a property on an element.\n   * Note: This will fail if the property was not mentioned previously as a host property\n   * in the View.\n   */\n  setElementProperty(view:ViewRef, elementIndex:number, propertyName:string, propertyValue:any):void {}\n\n  /**\n   * This will set the value for a text node.\n   * Note: This needs to be separate from setElementProperty as we don't have ElementBinders\n   * for text nodes in the RenderProtoView either.\n   */\n  setText(view:ViewRef, textNodeIndex:number, text:string):void {}\n\n  /**\n   * Sets the dispatcher for all events that have been defined in the template or in directives\n   * in the given view.\n   */\n  setEventDispatcher(viewRef:ViewRef, dispatcher:any/*EventDispatcher*/):void {}\n\n  /**\n   * To be called at the end of the VmTurn so the API can buffer calls\n   */\n  flush():void {}\n}\n\n\n/**\n * A dispatcher for all events happening in a view.\n */\nexport class EventDispatcher {\n  /**\n   * Called when an event was triggered for a on-* attribute on an element.\n   * @param {Map<string, any>} locals Locals to be used to evaluate the\n   *   event expressions\n   */\n  dispatchEvent(\n    elementIndex:number, eventName:string, locals:Map<string, any>\n  ):void {}\n}\n"]}