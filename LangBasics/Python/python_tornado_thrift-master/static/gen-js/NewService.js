//
// Autogenerated by Thrift Compiler (0.8.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

NewService_ping_args = function(args) {
};
NewService_ping_args.prototype = {};
NewService_ping_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NewService_ping_args.prototype.write = function(output) {
  output.writeStructBegin('NewService_ping_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NewService_ping_result = function(args) {
};
NewService_ping_result.prototype = {};
NewService_ping_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NewService_ping_result.prototype.write = function(output) {
  output.writeStructBegin('NewService_ping_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NewService_strcat_args = function(args) {
  this.s1 = null;
  this.s2 = null;
  if (args) {
    if (args.s1 !== undefined) {
      this.s1 = args.s1;
    }
    if (args.s2 !== undefined) {
      this.s2 = args.s2;
    }
  }
};
NewService_strcat_args.prototype = {};
NewService_strcat_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.s1 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.s2 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NewService_strcat_args.prototype.write = function(output) {
  output.writeStructBegin('NewService_strcat_args');
  if (this.s1) {
    output.writeFieldBegin('s1', Thrift.Type.STRING, 1);
    output.writeString(this.s1);
    output.writeFieldEnd();
  }
  if (this.s2) {
    output.writeFieldBegin('s2', Thrift.Type.STRING, 2);
    output.writeString(this.s2);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NewService_strcat_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
NewService_strcat_result.prototype = {};
NewService_strcat_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NewService_strcat_result.prototype.write = function(output) {
  output.writeStructBegin('NewService_strcat_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NewServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
NewServiceClient.prototype = {};
NewServiceClient.prototype.ping = function() {
  this.send_ping();
  this.recv_ping();
};

NewServiceClient.prototype.send_ping = function() {
  this.output.writeMessageBegin('ping', Thrift.MessageType.CALL, this.seqid);
  var args = new NewService_ping_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

NewServiceClient.prototype.recv_ping = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NewService_ping_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
NewServiceClient.prototype.strcat = function(s1, s2) {
  this.send_strcat(s1, s2);
  return this.recv_strcat();
};

NewServiceClient.prototype.send_strcat = function(s1, s2) {
  this.output.writeMessageBegin('strcat', Thrift.MessageType.CALL, this.seqid);
  var args = new NewService_strcat_args();
  args.s1 = s1;
  args.s2 = s2;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

NewServiceClient.prototype.recv_strcat = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new NewService_strcat_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'strcat failed: unknown result';
};
